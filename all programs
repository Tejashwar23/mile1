1. POSSIBLE SUM PAIR--------------------------------------------------------

using System.Linq;
public int[] FindPossibleSum(int input1, int input2)
        {
            string s1 = input1.ToString();
            int[] s = new int[s1.Length];
            int o = 0;
            while (input1 != 0)
            {
                s[o++] = input1 % 10;
                input1 /= 10;
            }
            Array.Reverse(s);
            int[] a = new int[100];
            int c = 0;
            int ck = 0;
            for (int i = 0; i < s1.Length; i++)
            {
                for (int j = 0; j < s1.Length; j++)
                {
                    for (int k = j + 1; k < s1.Length; k++)
                    {
                        if (s[j] + s[k] == input2 && s[k] > 0)
                        {
                            ck++;
                            a[c++] = int.Parse(s[j].ToString() + s[k].ToString());
                        }
                        for (int m = k + 1; m < s1.Length; m++)
                        {
                            if (s[j] + s[k] + s[m] == input2 && s[m] > 0)
                            {
                                ck++;
                                a[c++] = int.Parse(s[j].ToString() + s[k].ToString() + s[m].ToString());
                            }
                            for (int n = m + 1; n < s1.Length; n++)
                            {
                                if (s[j] + s[k] + s[m] + s[n] == input2 && s[n] > 0)
                                {
                                    ck++;
                                    a[c++] = int.Parse(s[j].ToString() + s[k].ToString() + s[m].ToString() + s[n].ToString());
                                    for (int z = n + 1; z < s.Length; z++)
                                    {
                                        if (s[j] + s[k] + s[m] + s[n] + s[z] == input2 && s[z] > 0)
                                        {
                                            ck++;
                                            a[c++] = int.Parse(s[j].ToString() + s[k].ToString() + s[m].ToString() + s[n].ToString() + s[z].ToString());
                                        }
                                    }
                                }
                            }
                        }

                    }
                }
            }
            int[] b = a.Distinct().ToArray();
            Array.Sort(b);
            for (int i = 0; i < b.Length - 1; i++)
            {
                b[i] = b[i + 1];
            }
            b = b.Distinct().ToArray();
            int[] c1 = new int[1] { 0 };
            if (input2 == 0)
            {
                return null;
            }
            if (ck > 0)
                return b;
            else
                return (c1);
        }
    }
    
    2. ROMAN----------------------------------------------------------------------------------------------------
    
     public string FindMessage(string input1)
    {
        //Read only region end
        //Write code here
        //throw new NotImplementedException("Method  FindMessage(string input1) not Implemented.");
         string res = "";
            string[] arr = input1.Split(' ');
            for(int i=0;i<arr.Length;i++)
            {
                res = res + (char)getDecimal(arr[i]);
            }
	       return res;
	}
	 public int value(char r)
        {
            if (r == 'I')
                return 1;
            if (r == 'V')
                return 5;
            if (r == 'X')
                return 10;
            if (r == 'L')
                return 50;
            if (r == 'C')
                return 100;
            if (r == 'D')
                return 500;
            if (r == 'M')
                return 1000;
            return -1;
        }
        public int getDecimal(string s)
        {
            int res = 0;

            for(int i=0;i<s.Length;i++)
            {
                //Getting value of 1st char
                int s1 = value(s[i]);

                //get the next char s[i+1]
                if(i+1<s.Length)
                {
                    int s2 = value(s[i + 1]);
                    if(s1>=s2)
                    {
                        res = res + s1;
                    }
                    else
                    {
                        res = res + s2 - s1;
                        i++;//To move to next character
                    }
                }
                //only one character
                else
                {
                    res = res + s1;
                    i++;
                }        
            }
            return res;
	    
3. ADDITION OF STRINGS WITHOUT USING BIGINT------------------------------------------------------------------

char[] num1 = input1.ToCharArray();
        char[] num2 = input2.ToCharArray();
        int sum = 0;
        int carry = 0;
        int size = (input1.Length > input2.Length) ? input1.Length + 1 : input2.Length + 1;
        int[] result = new int[size];
        int index = size - 1;
        int num1index = num1.Length - 1;
        int num2index = num2.Length - 1;


        while (true)
        {
            if (num1index >= 0 && num2index >= 0)
            {
                sum = (num1[num1index]-'0') + (num2[num2index]-'0') + carry;
            }
            else if(num1index< 0 && num2index >= 0)
            {
                sum = (num2[num2index]-'0') + carry;
            }
            else if (num1index >= 0 && num2index < 0)
            {
                sum = (num1[num1index]-'0') + carry;
            }
            else { break; }


            carry = sum /10;
            result[index] = sum % 10;
            index--;
            num1index--;
            num2index--;
        } 

            if(carry>0)
            {
                result[index] = carry;
            }
       
		/*foreach(var v in result)
		{
			Console.Write(v+ "");
		}
		*/
		string res="";
		string str1="";
		foreach(var v in result)
		{
			res=res+v.ToString();
		}
		
		if(result[0]==0)
		{
			str1=res.Substring(1);
		}
		else
		{
			str1=res;
		}
		
		Console.WriteLine(str1);
		return str1;
		
4.token sequence of 3 persons-----------------------------------------------------------------------------------------

   int[] a=new int[input1];
		string res=String.Empty;
		int count=1,maxlen=0,curridx=0,maxidx=0;
		for(int i=0;i<input1;i++)
		{
			a[i]=input3[i];
		}
		Array.Sort(a);
		for(int j=0;j<input1-1;j++)
		{
			if(a[j]+1==a[j+1])
			{
				count++;
				if(count==2)
				{
					curridx=j;
				}	
			}
			else
			{
				if(count>maxlen&&count!=1)
				{
					maxidx=curridx;
					maxlen=count;
				}
				count=1;
			}
		}
		if(count>maxlen&&count!=1)
				{
					maxidx=curridx;
					maxlen=count;
				}
		if(maxlen<3)
		{
			res="NONE"+":";
		}
		else
	        {
		  for(int u=maxidx;u<maxidx+maxlen;u++)
		  {
			for(int g=0;g<input1;g++)
			{
				if(a[u]==input3[g])
				{
					res+=input2[g]+":";
				}
			}
		  }
	        }
		return res.Substring(0,res.Length-1);
		
5.TRAVERSE OF ADDRESS AND KEY------------------------------------------------------------------------------





6.WIPRO TECHNOLOGIES BANGALORE--------------------------------------------------------------

using System;
using System.Collections.Generic;

//Read only region start
public class UserMainCode
{
    public string reverseWordsandCase(string input1,int input2)
    {
        //Read only region end
        //Write code here
		string [] arr=input1.Split();
		string res="";
                if(input2==0)
				{
					for(int i=0;i<arr.Length;i++)
					{
						char[]ch=arr[i].ToCharArray();
						Array.Reverse(ch);
						res+=new string(ch)+" ";
					}
				}
		        else
				{
					for(int i=0;i<arr.Length;i++)
					{
						char[]ch=arr[i].ToCharArray();
						int l=ch.Length;
						if(char.IsLetter(ch[l-1]))
						{
							if(char.IsUpper(ch[0]))
							{
								ch[l-1]=char.ToUpper(ch[l-1]);
								ch[0]=char.ToLower(ch[0]);
							}
						}
					
						Array.Reverse(ch);
						res+=new string(ch)+" ";
					}
				}
		return res.Substring(0,res.Length-1);
    }
}


7.nTH PRIME---------------------------------------------------------------------------------------------

 int num = 1, i;
            int count = 0;

            while (count < n)
            {
                num = num + 1;
                for ( i = 2; i <= num; i++)
                {
                    if (num % i == 0)
                    {
                        break;
                    }
                }
                if (i == num)
                {
                    count = count + 1;
                }
            }
	    
8.prime RANGE-----------------------------------------------------------------------------------------

 int c = 0, count = 0;
            int input1 = int.Parse(Console.ReadLine());
            int input2 = int.Parse(Console.ReadLine());
            for (int i = input1; i <= input2; i++)
            {
                c = 0;
                for (int j = 2; j <= i / 2; j++)
                {
                    if (i % j == 0)
                    {
                        ++c;
                        break;
                    }
                }
                if (c == 0)
                {
                    ++count;
                }
		
		9.

            
            
